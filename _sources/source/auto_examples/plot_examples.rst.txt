.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_source_auto_examples_plot_examples.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_source_auto_examples_plot_examples.py:


Example on retrieving and plotting winds
----------------------------------------

This is a simple example for how to retrieve and plot winds from 2 radars
using PyDDA.

Author: Robert C. Jackson



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /source/auto_examples/images/sphx_glr_plot_examples_001.png
            :class: sphx-glr-multi-img

    *

      .. image:: /source/auto_examples/images/sphx_glr_plot_examples_002.png
            :class: sphx-glr-multi-img

    *

      .. image:: /source/auto_examples/images/sphx_glr_plot_examples_003.png
            :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/travis/miniconda3/envs/testenv/lib/python3.7/site-packages/pyart/io/cfradial.py:384: UserWarning: WARNING: valid_min not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /home/travis/miniconda3/envs/testenv/lib/python3.7/site-packages/pyart/io/cfradial.py:384: UserWarning: WARNING: valid_max not used since it
    cannot be safely cast to variable data type
      data = self.ncvar[:]
    /home/travis/build/openradar/PyDDA/pydda/retrieval/angles.py:24: RuntimeWarning: invalid value encountered in arccos
      elev = np.arccos((Re**2 + slantrsq - rh**2)/(2 * Re * slantr))
    Calculating weights for radars 0 and 1
    /home/travis/build/openradar/PyDDA/pydda/retrieval/wind_retrieve.py:535: RuntimeWarning: invalid value encountered in arccos
      theta_2 = np.arccos((x-rad2[1])/b)
    Calculating weights for models...
    Starting solver 
    rmsVR = 6.776753068494562
    Total points:92092.0
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |  22.8056| 179.8659|   0.0000|   0.0000|   0.0000|   0.0000|  14.2882
    Norm of gradient: 0.060347431274420944
    Iterations before filter: 10
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   3.8713|  66.1170|   0.0000|   0.0000|   0.0000|   0.0000|  23.7745
    Norm of gradient: 0.02372694747570922
    Iterations before filter: 20
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   4.0472|  37.8079|   0.0000|   0.0000|   0.0000|   0.0000|  24.6297
    Norm of gradient: 0.02779702290042135
    Iterations before filter: 30
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.8673|  28.6315|   0.0000|   0.0000|   0.0000|   0.0000|  26.5968
    Norm of gradient: 0.006835527283244816
    Iterations before filter: 40
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   1.6686|  20.8826|   0.0000|   0.0000|   0.0000|   0.0000|  28.4437
    Norm of gradient: 0.023224596559256867
    Iterations before filter: 50
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.5065|  18.2438|   0.0000|   0.0000|   0.0000|   0.0000|  28.6566
    Norm of gradient: 0.006565409425024461
    Iterations before filter: 60
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.5679|  15.6097|   0.0000|   0.0000|   0.0000|   0.0000|  29.2501
    Norm of gradient: 0.006177474586057
    Iterations before filter: 70
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.3157|  14.5197|   0.0000|   0.0000|   0.0000|   0.0000|  30.2715
    Norm of gradient: 0.0035443644107431118
    Iterations before filter: 80
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.2528|  13.5275|   0.0000|   0.0000|   0.0000|   0.0000|  30.3527
    Norm of gradient: 0.002892126199622085
    Iterations before filter: 90
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.2858|  13.0896|   0.0000|   0.0000|   0.0000|   0.0000|  30.6199
    Norm of gradient: 0.0033178819236652727
    Iterations before filter: 100
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.2688|  13.0232|   0.0000|   0.0000|   0.0000|   0.0000|  30.6529
    Norm of gradient: 0.003424754964509097
    Iterations before filter: 110
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.2203|  13.0222|   0.0000|   0.0000|   0.0000|   0.0000|  30.6752
    Norm of gradient: 0.003483670630141192
    Iterations before filter: 120
    | Jvel    | Jmass   | Jsmooth |   Jbg   | Jvort   | Jmodel | Max w  
    |   0.2194|  13.0228|   0.0000|   0.0000|   0.0000|   0.0000|  30.6785
    Norm of gradient: 0.0034925009878411786
    Iterations before filter: 130
    Applying low pass filter to wind field...
    Iterations after filter: 1
    Iterations after filter: 2
    Done! Time = 542.7
    /home/travis/build/openradar/PyDDA/pydda/vis/barb_plot.py:175: UserWarning: linewidths is ignored by contourf
      alpha=contour_alpha)
    /home/travis/build/openradar/PyDDA/pydda/retrieval/wind_retrieve.py:535: RuntimeWarning: invalid value encountered in arccos
      theta_2 = np.arccos((x-rad2[1])/b)
    /home/travis/build/openradar/PyDDA/pydda/vis/barb_plot.py:214: UserWarning: The following kwargs were not used by contour: 'color'
      levels=[bca_min, bca_max], color='k')
    /home/travis/build/openradar/PyDDA/pydda/retrieval/wind_retrieve.py:535: RuntimeWarning: invalid value encountered in arccos
      theta_2 = np.arccos((x-rad2[1])/b)
    /home/travis/build/openradar/PyDDA/pydda/vis/barb_plot.py:214: UserWarning: The following kwargs were not used by contour: 'color'
      levels=[bca_min, bca_max], color='k')
    /home/travis/build/openradar/PyDDA/pydda/vis/barb_plot.py:637: UserWarning: linewidths is ignored by contourf
      alpha=contour_alpha)
    /home/travis/build/openradar/PyDDA/pydda/vis/barb_plot.py:825: UserWarning: linewidths is ignored by contourf
      alpha=contour_alpha)





|


.. code-block:: default


    import pyart
    import pydda
    from matplotlib import pyplot as plt


    berr_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR0)
    cpol_grid = pyart.io.read_grid(pydda.tests.EXAMPLE_RADAR1)

    sounding = pyart.io.read_arm_sonde(
        pydda.tests.SOUNDING_PATH)


    # Load sounding data and insert as an intialization
    u_init, v_init, w_init = pydda.initialization.make_wind_field_from_profile(
            cpol_grid, sounding[1], vel_field='corrected_velocity')

    # Start the wind retrieval. This example only uses the mass continuity
    # and data weighting constraints.
    Grids = pydda.retrieval.get_dd_wind_field([berr_grid, cpol_grid], u_init,
                                              v_init, w_init, Co=1.0, Cm=1500.0,
                                              Cz=0, 
                                              frz=5000.0, filt_iterations=2,
                                              mask_outside_opt=True, upper_bc=1)
    # Plot a horizontal cross section
    plt.figure(figsize=(9, 9))
    pydda.vis.plot_horiz_xsection_barbs(Grids, background_field='reflectivity',
                                        level=6,
                                        w_vel_contours=[3, 6, 9, 12, 15],
                                        barb_spacing_x_km=5.0,
                                        barb_spacing_y_km=15.0)
    plt.show()

    # Plot a vertical X-Z cross section
    plt.figure(figsize=(9, 9))
    pydda.vis.plot_xz_xsection_barbs(Grids, background_field='reflectivity',
                                     level=40,
                                     w_vel_contours=[3, 6, 9, 12, 15],
                                     barb_spacing_x_km=10.0,
                                     barb_spacing_z_km=2.0)
    plt.show()

    # Plot a vertical Y-Z cross section
    plt.figure(figsize=(9, 9))
    pydda.vis.plot_yz_xsection_barbs(Grids, background_field='reflectivity', 
                                     level=40,
                                     w_vel_contours=[3, 6, 9, 12, 15],
                                     barb_spacing_y_km=10.0,
                                     barb_spacing_z_km=2.0)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 9 minutes  5.132 seconds)


.. _sphx_glr_download_source_auto_examples_plot_examples.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_examples.py <plot_examples.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_examples.ipynb <plot_examples.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
